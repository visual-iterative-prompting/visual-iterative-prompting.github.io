import torch
from typing import Dict, Tuple

@torch.jit.script
def compute_reward(commands: torch.Tensor,
                   root_states: torch.Tensor,
                   lin_vel_scale: float,
                   ang_vel_scale: float) -> Tuple[torch.Tensor, Dict[str, torch.Tensor]]:

    # Extract target velocities
    target_lin_vel_x = commands[:, 0] / lin_vel_scale
    target_lin_vel_y = commands[:, 1] / lin_vel_scale
    target_yaw_vel = commands[:, 2] / ang_vel_scale

    # Extract current velocities from the root state (7:10 for linear velocity, 10:13 for angular velocity)
    base_quat = root_states[:, 3:7]
    base_lin_vel = quat_rotate_inverse(base_quat, root_states[:, 7:10]) / lin_vel_scale
    base_ang_vel = quat_rotate_inverse(base_quat, root_states[:, 10:13]) / ang_vel_scale

    # Calculate velocity errors
    lin_vel_error_x = torch.abs(target_lin_vel_x - base_lin_vel[:, 0])
    lin_vel_error_y = torch.abs(target_lin_vel_y - base_lin_vel[:, 1])
    yaw_vel_error = torch.abs(target_yaw_vel - base_ang_vel[:, 2])

    # Combine linear velocity errors
    combined_lin_vel_error = lin_vel_error_x + lin_vel_error_y

    # Update temperature parameters
    temp_combined_lin_vel_error = 2.0
    temp_yaw_vel_error = 8.0
    temp_total_reward = 2.0

    # Apply exponential transformation with temperature parameters
    exp_combined_lin_vel_error = torch.exp(-temp_combined_lin_vel_error * combined_lin_vel_error)
    exp_yaw_vel_error = torch.exp(-temp_yaw_vel_error * yaw_vel_error)

    # Combine transformed errors as the reward
    combined_reward = exp_combined_lin_vel_error + exp_yaw_vel_error

    # Apply exponential transformation to total reward
    reward = torch.exp(-temp_total_reward * (1.0 - combined_reward))

    # Dictionary of individual reward components for debugging and analysis
    reward_info = {
        "combined_lin_vel_error": exp_combined_lin_vel_error,
        "yaw_vel_error": exp_yaw_vel_error
    }

    return reward, reward_info
