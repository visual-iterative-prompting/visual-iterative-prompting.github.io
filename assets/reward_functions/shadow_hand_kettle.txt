import torch
from typing import Dict, Tuple

@torch.jit.script
def compute_reward_updated(kettle_handle_pos: torch.Tensor, kettle_spout_pos: torch.Tensor, bucket_handle_pos: torch.Tensor,
                           left_hand_pos: torch.Tensor, right_hand_pos: torch.Tensor) -> Tuple[torch.Tensor, Dict[str, torch.Tensor]]:

    # Distance between kettle handle and left hand
    dist_kettle_handle_left = torch.norm(kettle_handle_pos - left_hand_pos, dim=-1)

    # Distance between kettle handle and right hand
    dist_kettle_handle_right = torch.norm(kettle_handle_pos - right_hand_pos, dim=-1)

    # Distance between bucket handle and left hand
    dist_bucket_handle_left = torch.norm(bucket_handle_pos - left_hand_pos, dim=-1)

    # Distance between bucket handle and right hand
    dist_bucket_handle_right = torch.norm(bucket_handle_pos - right_hand_pos, dim=-1)

    # Min distance of kettle handle to either hand
    min_dist_kettle_handle = torch.min(dist_kettle_handle_left, dist_kettle_handle_right)

    # Min distance of bucket handle to either hand
    min_dist_bucket_handle = torch.min(dist_bucket_handle_left, dist_bucket_handle_right)

    # Align kettle spout above the bucket
    dist_spout_bucket = torch.norm(kettle_spout_pos - bucket_handle_pos, dim=-1)

    # Align kettle and bucket in the z-axis (vertical alignment)
    dist_spout_bucket_z = torch.abs(kettle_spout_pos[:, 2] - bucket_handle_pos[:, 2])

    # Temperature values for reward scaling
    temp_kettle_handle = 0.5
    temp_bucket_handle = 0.5
    temp_spout_bucket = 0.3
    temp_spout_bucket_z = 2.5
    temp_no_spill = 5.0

    # Scaled rewards for grasping kettle and bucket and aligning kettle spout above the bucket
    reward_kettle_handle = torch.exp(-temp_kettle_handle * min_dist_kettle_handle)
    reward_bucket_handle = torch.exp(-temp_bucket_handle * min_dist_bucket_handle)
    reward_spout_bucket = torch.exp(-temp_spout_bucket * dist_spout_bucket)
    reward_spout_bucket_z = torch.exp(-temp_spout_bucket_z * dist_spout_bucket_z)

    # Penalty term for spilling water (small balls)
    num_balls_in_bucket = torch.tensor(0.5)  # Should be replaced by the number of balls in the bucket divided by the total number of balls
    reward_no_spill = torch.log(1 + torch.exp(-temp_no_spill * (num_balls_in_bucket - 0.5)))

    # Combine rewards
    total_reward = reward_kettle_handle + reward_bucket_handle + reward_no_spill + reward_spout_bucket + reward_spout_bucket_z

    return total_reward, {"reward_kettle_handle": reward_kettle_handle, "reward_bucket_handle": reward_bucket_handle,
                          "reward_no_spill": reward_no_spill, "reward_spout_bucket": reward_spout_bucket,
                          "reward_spout_bucket_z": reward_spout_bucket_z}
